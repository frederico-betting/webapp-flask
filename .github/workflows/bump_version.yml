name: Version Tag
on:
  push:
    branches: [ master ]

jobs:
  bump_version:
    name: Bumping version
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        name: Clone repository

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.10.9

      - name: Update tags from Git
        shell: bash
        run: |
          git fetch --prune --unshallow --tags

      - name: Generate new version
        shell: bash {0}
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          DEFAULT_MAJOR_MINOR_VERSION=0.0
          DEFAULT_BUILD_VERSION=0

          CURRENT_VERSION_REPO=$(cat version.txt 2> /dev/null)
          if [ $? -ne 0 ]; then
              echo "File 'version.txt' not found."
          fi

          ## Getting version info from branch
          # RegEx to identify major and minor version from the version file.
          re="([0-9]+\.[0-9]+).*"
          if [[ $CURRENT_VERSION_REPO =~ $re ]]; then
              MAJOR_MINOR_VERSION=${BASH_REMATCH[1]}
          else
              MAJOR_MINOR_VERSION=${DEFAULT_MAJOR_MINOR_VERSION}
          fi
          echo "Current major and minor version: ${MAJOR_MINOR_VERSION}"

          ## Getting version info from Git Tag
          HASH=$(git rev-parse HEAD)
          VERSION_GIT_TAG=$(git tag | sort -V | tail -1 2> /dev/null)
          if [[ $VERSION_GIT_TAG =~ $re ]] && [[ $VERSION_GIT_TAG =~ ${MAJOR_MINOR_VERSION}.* ]]; then
              echo "Version found in Git: ${VERSION_GIT_TAG}"
              re="[0-9]+\.[0-9]+\.([0-9]+)"
              [[ $VERSION_GIT_TAG =~ $re ]]
              BUILD=$((BASH_REMATCH[1]+1))
              VERSION=${MAJOR_MINOR_VERSION}.${BUILD}
          else
              echo "Major and minor version not found in Git. Creating new version tag..."
              VERSION=${MAJOR_MINOR_VERSION}.${DEFAULT_BUILD_VERSION}
          fi
          echo "Setting version to ${VERSION} with hash ${HASH}"
          echo "MAJOR_MINOR_VERSION=$MAJOR_MINOR_VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update version file
        shell: bash {0}
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          echo ${VERSION} > version.txt

      - name: Push to release branch (version)
        shell: bash {0}
        env:
          MAJOR_MINOR_VERSION: ${{ env.MAJOR_MINOR_VERSION }}
          VERSION: ${{ env.VERSION }}
        run: |
          git config --global user.name 'Frederico Betting'
          git config --global user.email 'frederico-betting@users.noreply.github.com'
          git commit -am "Update version.txt file (version: ${VERSION})"
          git push master:${MAJOR_MINOR_VERSION} -f

      - name: Publish Release and Tag
        shell: bash {0}
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          MAJOR_MINOR_VERSION: ${{ env.MAJOR_MINOR_VERSION }}
          VERSION: ${{ env.VERSION }}
        run: |
          curl --silent --request POST \
            --header "Accept: application/vnd.github+json" \
            --header "Authorization: Bearer ${BOT_TOKEN}" \
            --header "X-GitHub-Api-Version: 2022-11-28" \
            --data "{\"tag_name\": \"${VERSION}\", \"target_commitish\": \"${MAJOR_MINOR_VERSION}\", \"name\": \"${VERSION}\", \"body\": \"Release of version ${VERSION}\", \"draft\": false, \"prerelease\": false}" \
            https://api.github.com/repos/${{ github.repository }}/releases

      # - name: Clone repository 'python-package-server'
      #   uses: actions/checkout@v3
      #   with:
      #     repository: ${{ github.repository_owner }}/python-package-server

      # - name: Publish new library version in python-package-server
      #   shell: bash {0}
      #   env:
      #     VERSION: ${{ env.VERSION }}
      #   run: |
      #     make install
      #     make bump app=samplenotedata version=${VERSION} protocol=ssh org=${{ github.repository_owner }} repo=${{ github.event.repository.name }}
